/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.36
 * Generated at: 2025-05-28 11:01:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import uts.isd.model.User;

public final class header_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("uts.isd.model.User");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("    class Header extends HTMLElement {\n");
      out.write("        connectedCallback() {\n");
      out.write("            const shadow = this.attachShadow({ mode: \"open\" });\n");
      out.write("            shadow.innerHTML = `\n");
      out.write("                <style>\n");
      out.write("                    .header {\n");
      out.write("                        display: flex;\n");
      out.write("                        justify-content: space-between;\n");
      out.write("                        align-items: center;\n");
      out.write("                        background-color: #333;\n");
      out.write("                        padding: 10px;\n");
      out.write("                        color: white;\n");
      out.write("                    }\n");
      out.write("                    .items {\n");
      out.write("                        list-style: none;\n");
      out.write("                        padding: 0;\n");
      out.write("                        display: flex;\n");
      out.write("                        gap: 15px;\n");
      out.write("                    }\n");
      out.write("                    .items a {\n");
      out.write("                        text-decoration: none;\n");
      out.write("                        color: white;\n");
      out.write("                        padding: 10px;\n");
      out.write("                        font-weight: bold;\n");
      out.write("                    }\n");
      out.write("                    .user-box {\n");
      out.write("                        display: flex;\n");
      out.write("                        gap: 10px;\n");
      out.write("                    }\n");
      out.write("                    .header-button {\n");
      out.write("                        background-color: transparent;\n");
      out.write("                        color: white;\n");
      out.write("                        font-weight: bold;\n");
      out.write("                        border: 2px solid white;\n");
      out.write("                        padding: 10px 30px;\n");
      out.write("                        cursor: pointer;\n");
      out.write("                        transition: 0.3s;\n");
      out.write("                    }\n");
      out.write("                    .header-button:hover {\n");
      out.write("                        background-color: white;\n");
      out.write("                        color: black;\n");
      out.write("                        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);\n");
      out.write("                    }\n");
      out.write("                </style>\n");
      out.write("                <div class=\"header\">\n");
      out.write("                    <ul class=\"items\">\n");
      out.write("                        <li><a href=\"index.jsp\">HOME</a></li>\n");
      out.write("                        <li><a href=\"register.jsp\">REGISTER</a></li>\n");
      out.write("                        <li><a href=\"order?action=list\">ðŸ§¾ MY ORDERS</a></li>\n");
      out.write("                        <li><a href=\"#\">ABOUT</a></li>\n");
      out.write("                        <li><a href=\"#\">CONTACT</a></li>\n");
      out.write("                    </ul>\n");
      out.write("                    <div>\n");
      out.write("                        <h2>Logged in user:\n");
      out.write("                            ");

                                User loggedInUser = (User) session.getAttribute("loggedInUser");
                                if (loggedInUser != null) {
                                    out.print(loggedInUser.getEmail());
                                } else {
                                    out.print("Guest");
                                }
                            
      out.write("\n");
      out.write("                        </h2>\n");
      out.write("                    </div>\n");
      out.write("                    ");
 if (session.getAttribute("loggedInUser") != null) { 
      out.write("\n");
      out.write("                    <div class=\"user-box\">\n");
      out.write("                        <a href=\"profile-dashboard.jsp\"><button class=\"header-button\">My Info</button></a>\n");
      out.write("                        <a href=\"LogoutServlet\"><button class=\"header-button\">LOGOUT</button></a>\n");
      out.write("                    </div>\n");
      out.write("                    ");
 } 
      out.write("\n");
      out.write("                </div>\n");
      out.write("            `;\n");
      out.write("        }\n");
      out.write("    }\n");
      out.write("    customElements.define(\"pref-header\", Header);\n");
      out.write("</script>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
